plugins {
    id "java"
    id "checkstyle"
}

base {
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

    archivesName = project.maven_name ?: rootProject.maven_name
    group = project.maven_group ?: rootProject.maven_group
    version = project.maven_version ?: rootProject.maven_version
}

configurations {
    include

    implementation.extendsFrom include
    api.extendsFrom include
}

repositories {
    mavenCentral()
    maven {
        name = "lenni0451"
        url = "https://maven.lenni0451.net/everything"
    }
    maven {
        name = "viaversion"
        url = "https://repo.viaversion.com"
    }
}

dependencies {
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    compileOnly "org.jetbrains:annotations:26.0.2"
    compileOnly(annotationProcessor("org.projectlombok:lombok:1.18.38"))
    compileOnly "net.raphimc:ViaProxy:3.4.3-SNAPSHOT"
    include "net.lenni0451.commons:gson:1.7.1"
}

processResources {
    inputs.properties(
            "version": project.maven_version
    )

    filesMatching("viaproxy.yml") {
        expand(
                "version": project.maven_version
        )
    }
}

jar {
    dependsOn configurations.include
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.include.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    }
}

checkstyle {
    toolVersion = "10.16.0" //Latest version for Java 8: 9.3
    configFile = rootProject.file("config/checkstyle/checkstyle.xml")
}
build.dependsOn(check)

tasks.register("runViaProxy", JavaExec) {
    dependsOn tasks.jar

    mainClass = "net.raphimc.viaproxy.ViaProxy"
    classpath = sourceSets.main.compileClasspath
    workingDir = file("run")
    jvmArgs = ["-DskipUpdateCheck"]
    args = ["config", "viaproxy.yml"]

    doFirst {
        def pluginsDir = file("$workingDir/plugins")
        pluginsDir.mkdirs()
        file("$pluginsDir/${project.name}.jar").bytes = tasks.jar.archiveFile.get().asFile.bytes
    }

    doLast {
        file("$workingDir/plugins/${project.name}.jar").delete()
        file("$workingDir/logs").deleteDir()
    }
}
